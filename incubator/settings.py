"""
Django settings for incubator project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-=tx=&&@+hwrum&mj^pcm-d3rfhug(e$7vv_^e^xkzzoa8hfe3a'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'users',
    'startups',
    'news',
    'events',
    'opportunities',
    'messageries',
    'files',
    'logs',
    'corsheaders',
    'import_api',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ]
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware'
]

ROOT_URLCONF = 'incubator.urls'

ALLOWED_HOSTS = ["*"]

DATABASES = {
    "default": dj_database_url.config(default=os.environ.get("DATABASE_URL"))
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'incubator.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

def parse_database_url(db_url: str):
    """Parse a postgres URL and return a DATABASES-compatible dict."""
    # expected format: postgres://USER:PASSWORD@HOST:PORT/NAME
    parsed = urlparse(db_url)
    return {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': parsed.path.lstrip('/'),
            'USER': parsed.username,
            'PASSWORD': parsed.password,
            'HOST': parsed.hostname,
            'PORT': str(parsed.port) if parsed.port else '',
        }
    }

# Use DATABASE_URL from environment if present, otherwise use the Railway URL provided.
RAILWAY_DATABASE_URL = os.environ.get(
    'DATABASE_URL',
    'postgresql://postgres:JiTmqxfjUgAHfOexTCzbKwxvIbEsnzAJ@shuttle.proxy.rlwy.net:19297/railway'
)

DATABASES = parse_database_url(RAILWAY_DATABASE_URL)

JEB_API_TOKEN = "81d1160831e2f182a69c1526c6b5204e"
JEB_API_BASE = "https://api.jeb-incubator.com"

# Cron configuration is optional in environments where the `crontab` executable
# is not available (for example, many container images). Enable cron by setting
# the environment variable ENABLE_CRON to a truthy value. When enabled, we try
# to import django_crontab and register the jobs; if the package or system
# executable isn't present we silently skip cron setup.
ENABLE_CRON = os.getenv("ENABLE_CRON", "False").lower() in ("1", "true", "yes")


# Railway production settings
import os
DEBUG = os.getenv("DEBUG", "False") == "True"
ALLOWED_HOSTS = ["*"]

# Database (via DATABASE_URL)
import dj_database_url
DATABASES = {
    "default": dj_database_url.config(
        default=os.environ.get("DATABASE_URL"),
        conn_max_age=600,
        ssl_require=True
    )
}

SECRET_KEY = os.environ.get("SECRET_KEY", "fallback-secret")
DEBUG = os.environ.get("DEBUG", "False") == "True"
# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # ton front React
]

# AUTH_USER_MODEL = 'users.Utilisateur'
